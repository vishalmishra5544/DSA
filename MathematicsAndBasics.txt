MATHEMATICS AND BASICS:
//finding number of digits in a number
int numOfDigits(int n){
return floor(log10(n))+1;
}
//factorial
int fact(int n){
int res=1;
for(int i=n;i>=1;i--)
  res=res*i;
return res;  
}
//palindrome
int palindrome(int n){
int res=n,rev=0;
while(n>0){
 rev=rev*10+n%10;
 n=n/10;
}
return (res==rev);
}
//gcd or hcf
int gcd(int a,int b){
while(a!=b){
if(a>b) a=a-b;
if(b>a) b=b-a;
}
return a;
}
//peak element
  public:
    int findPeak(int arr[],int n,int l,int r){
        int mid=l+(r-l)/2;
        if((mid==n-1||arr[mid]>=arr[mid+1])&&(mid==0||arr[mid-1]<=arr[mid])){
           return mid;
       }else if(mid<n-1&&arr[mid]<arr[mid+1]){
           findPeak(arr,n,mid+1,r);
       }else if(mid>0 && arr[mid-1]>arr[mid]){
           findPeak(arr,n,l,mid-1);
       }
    }
    int peakElement(int arr[], int n)
    {
       // Your code here
       int l=0,r=n-1;
       return findPeak(arr,n,l,r);
       }
return a;
}
//lcm
int lcm(int a,int b){
return (a*b)/(gcd(a,b));
}
//check for prime
bool prime(int n){
if(n==1) return false;
if(n==2||n==3) return true;
if(n%2==0||n%3==0) return false;
for(int i=5;i*i<=n;i=i+6){
 if(n%i==0||n%(i+2)==0) return false;
}
return true;
}
//prime factors
void primeFactors(int n){
while(n%2==0){
n=n/2;
cout<<2<<endl;
}
while(n%3==0){
n=n/3;
cout<<3<<endl;
}
for(int i=5;i*i<=n;i=i+6){
 while(n%i==0){
 n=n/i;
 cout<<i<<endl;
 }
 while(n%(i+2)==0){
 n=n/(i+2);
 cout<<(i+2)<<endl;
 }
}
if(n>3)
 cout<<n<<endl;
}
//Largest prime factor
 bool isPrime(long long int n){
        if(n==1) return false;
        if(n==2||n==3) return true;
        if(n%2==0||n%3==0) return false;
        for(long long int i=5;i*i<=n;i+=6){
            if(n%i==0) return false;
            if(n%(i+2)==0) return false;
        }
        return true;
    }
    long long int largestPrimeFactor(int N){
        // code here
        long long int maxi=0;
        if(isPrime(N)) return N;
        for(long long int i=2;i*i<=N;i++){
            if(N%i==0&&isPrime(i)) maxi=max(maxi,i);
            if(N%i==0&&isPrime(N/i)) maxi=max(maxi,(N/i));
        }
        return maxi;
    }
//All divisors of a number
void allDivisors(int n){
for(int i=1;i*i<=n;i++){
 if(n%i==0) cout<<i<<endl;
}
for(;i>=1;i--){
 if(n%i==0) cout<<n/i<<endl;
}
}
//Sieve of erathosthenes //Prints all prime numbers till n;
void sieve(int n){
vector<bool> sieve(n+1,true);
for(int i=2;i*i<=n;i++){
 if(sieve[i]==true){
  for(int j=i*i;j<=n;j++){
  sieve[i]=false;
  }
 }
}
for(int i=2;i<=n;i++){
 if(sieve[i]==true) cout<<i<<endl;
}
}
//Trailing zeroes in factorial:
//Number of trailing zeroes in n! = Number of times n! is divisible by 10
    //= Highest power of 10 which divides n! = Highest power of 5 in n!
    int trailingZeroes(int N)
    {
        // Write Your Code here
        int res=0;
        while(N>0){
            res+=(N/5);
            N=N/5;
        }
        return res;
    }
//GCD Array:
/*
Question Breakdown : We want to find highest possible GCD by splitting subarrays into k parts.

What is GCD ? GCD is just finding the highest common factor.

So, Let's find highest common factor.

Intution -  Let's say I have splitted the array into 3 parts and calculated their sum.

----x--- | ------y----- | ----z-----

Now , Lets say the highest common factor for all of them is m.

So, I know that x%m=0 and y%m=0 and z%m=0

So, I can also say (x+y)%m=0 and (x+y+z)%m=0

That means , if I take prefixsum and take a
 factor and iterate over that prefixsum . 
So, whenever, presum[i]%m==0 -> That means , 
splitting at i is possible.

So, if there are more than or equal to k splittings -> I got
 my answer ðŸ™‚.

NOTE -> We want to split the whole array into subarrays. We don't want to leave any element. So, that means sum%m=0. For this to be possible, we have to use all the factors of sum. Since any of them can be the probable answer.
*/
 int solve(int N, int k, vector<int> &arr) {
        // code here
        vector<int> factors;
        for(int i=1;i<N;i++){
            arr[i]+=arr[i-1];
        }
        int G=arr[N-1];
        for(int i=1;i*i<=G;i++){
            if(G%i==0){
                factors.push_back(i);
                if(i!=G/i) factors.push_back(G/i);
            }
        }
        sort(factors.begin(),factors.end(),greater<int>());
        int count=0,ans=1;
        for(auto it:factors){
            count=0;
            for(int i=0;i<N;i++){
                if(arr[i]%it==0) count++;
            }
            if(count>=k){
                ans=it;
                break;
            }
        }
        return ans;
       
    }